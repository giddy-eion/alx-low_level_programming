!<arch>
0-isupper.o/    0           0     0     644     329       `
#include "main.h"

/**
 * _isupper - checks for upper case letters
 *@c: character
 * Description: uses the isupper option
 * Return: 1 if upper case, else 0
 */
int _isupper(int c)
{
        if (c >= 'A' && c <= 'Z')
        {
                return (1);
        }
        else
        {
                return (0);
        }
}

0-memset.o/     0           0     0     644     71        `
#include "main.h"

char *_memset(char *s, char b, unsigned int n);
{
}

0-strcat.o/     0           0     0     644     61        `
#include "main.h"

char *_strcat(char *dest, char *src);
{
}

1-isdigit.o/    0           0     0     644     228       `
#include "main.h"

/**
 * _isdigit - checks digit
 * @c: valur
 *
 * Return: 1 if digit, else 0
 */
int _isdigit(int c)
{
        if (c >= '0' && c <= '9')
                return (1);

        else
                return (0);
}
1-memcpy.o/     0           0     0     644     77        `
#include "main.h"

char *_memcpy(char *dest, char *src, unsigned int n);
{
}

1-strncat.o/    0           0     0     644     69        `
#include "main.h"

char *_strncat(char *dest, char *src, int n);
{
}

100-atoi.o/     0           0     0     644     43        `
#include "main.h"

int _atoi(char *s);
{
}

2-strchr.o/     0           0     0     644     408       `
#include "main.h"

/**
 * _strchr - function locates a charater in a string
 * @s: character
 * @c: character
 *
 * Return: c if first occurance is found
 * null if not found
 */
char *_strchr(char *s, char c)
{
        int index;

        for (index = 0; s[index] >= '\0'; index++)
        {
                if (s[index] == c)
                        return (s + index);
        }

        return ('\0');
}
2-strlen.o/     0           0     0     644     316       `
#include "main.h"

/**
 * _strlen - Returns the length of a string.
 * @s: The string to get the length of.
 *
 * Return: The length of @str.
 */
int _strlen(char *s)
{
        int length = 0;

        while (*s != '\0')
        {
                s++;
                length++;
        }

        return (length);
}
2-strncpy.o/    0           0     0     644     69        `
#include "main.h"

char *_strncpy(char *dest, char *src, int n);
{
}

3-islower.o/    0           0     0     644     330       `
#include "main.h"

/**
 * _islower - int c
 *@c: the character to be checked
 * Description: checks for lower case
 * Return: 1 if c is lowercase, 0 otherwise
 */
int _islower(int c)
{
        if (c >= 'a' && c <= 'z')
        {
                return (1);
        }
        else
        {
                return (0);
        }
}
3-puts.o/       0           0     0     644     185       `
#include "main.h"

/**
 * _puts - prints a string out
 * @s: string to be printed
 */
void _puts(char *s)
{
        while (*s)
                _putchar(*s++);
        _putchar('\n');
}

3-strcmp.o/     0           0     0     644     56        `
#include "main.h"

int _strcmp(char *s1, char *s2);
{
}
3-strspn.o/     0           0     0     644     793       `
#include "main.h"

/**
 * _strspn - function get the length of a prefix substring
 * @s: char type
 * @accept: char type
 * Return: number of bytes in the initial segment of s
 * which consist only of bytes from accept
 */
unsigned int _strspn(char *s, char *accept)
{
        unsigned int bytes = 0;
        int index;

        while (*s)
        {
                for (index = 0; accept[index]; index++)
                {
                        if (*s == accept[index])
                        {
                                bytes++;
                                break;
                        }

                        else if (accept[index + 1] == '\0')
                                return (bytes);
                }

                s++;
        }

        return (bytes);
}

4-isalpha.o/    0           0     0     644     363       `
#include "main.h"

/**
 * _isalpha - int c
 * @c: character to be checked
 *
 * Description: checkse for lower and upeecase alpha
 * Return: 1 if true, 0 otherwise
 */
int _isalpha(int c)
{
        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
        {
                return (1);
        }
        else
        {
                return (0);
        }
}

4-strpbrk.o/    0           0     0     644     573       `
#include "main.h"

/**
 * _strpbrk - function searches a string for any of a set of bytes
 * @s: char type
 * @accept: char type
 * Return:  a pointer to the byte in s that matches the bytes in accept
 * NULL if no such byte is found
 */
char *_strpbrk(char *s, char *accept)
{
        int index;

        while (*s)
        {
                for (index = 0; accept[index]; index++)
                {
                        if (*s == accept[index])
                                return (s);
                }
                s++;
        }
        return ('\0');
}

5-strstr.o/     0           0     0     644     854       `
#include "main.h"

/**
 * _strstr - function locates a substring
 * @haystack: pointer of char type
 * @needle: pointer of char type
 * Return: a pointer to the beginning of the located substring
 * or
 * NULL if the substring is not found.
 */
char *_strstr(char *haystack, char *needle)
{
        int index;

        if (*needle == 0)
                return (haystack);

        while (*haystack)
        {
                index = 0;

                if (haystack[index] == needle[index])
                {
                        do{
                                if (needle[index + 1] == '\0')
                                        return (haystack);

                                index++;

                        } while (haystack[index] == needle[index]);
                }

                haystack++;
        }

        return ('\0');
}
6-abs.o/        0           0     0     644     324       `
#include "main.h"

/**
 * _abs - int n
 * @n: absolute value
 *
 * Description: computes the abosolute value of an integer
 * Return: n if postive or 0
 * -n if negative
 */
int _abs(int n)
{
        if (n >= 0)
        {
                return (n);
        }
        else
        {
                return (-n);
        }
}
9-strcpy.o/     0           0     0     644     496       `
#include "main.h"

/**
 * _strcpy - Copies a string pointed to by @src, including the
 *           terminating null byte, to a buffer pointed to by @dest.
 * @dest: A buffer to copy the string to.
 * @src: The source string to copy.
 *
 * Return: A pointer to the destination string @dest.
 */
char *_strcpy(char *dest, char *src)
{
        int index = 0;

        while (src[index])
        {
                dest[index] = src[index];
                index++;
        }
        return (dest);
}
_putchar.o/     0           0     0     644     214       `
#include "main.h"
#include <unistd.h>

/**
 * _putchar: writes a character c to stdout
 * c: is the character to be written
 *
 * Return: 1 on success
 */
int _putchar(char c)
{
        return (write(1, &c, 1));
}
